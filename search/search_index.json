{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GLaDOS","text":""},{"location":"#description","title":"Description","text":"<p>GLaDOS est un projet de cr\u00e9ation de langage de programmation. Ce projet est divis\u00e9 en 2 parties :</p> <ul> <li>Un compilateur</li> <li>Un Parser qui transforme un fichier de code en AST</li> <li>Un compilateur qui transforme l'AST en bytecode puis en fichier binaire</li> <li>Une machine virtuelle</li> <li>Un programme qui lit un fichier binaire et l'execute</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Clonez le repo et lancez <code>make re</code>.</p>"},{"location":"#syntaxe","title":"Syntaxe","text":"<p>La syntaxe du langage est d\u00e9crite dans ici : Syntaxe</p>"},{"location":"#utilisation","title":"Utilisation","text":"<p>Lancez <code>./glados &lt;fichier&gt;</code> pour compiler un fichier <code>.bin</code> puis <code>./eval &lt;fichier.bin&gt;</code> pour l'executer.</p>"},{"location":"#auteurs","title":"Auteurs","text":"<ul> <li>Kenan Blasius</li> <li>Niels Ouvrard</li> <li>Cl\u00e9ment Montoya</li> </ul>"},{"location":"raw-bnf/","title":"Syntaxe BNF (Backus-Naur Form) brute du langage C--","text":"<pre><code>&lt;type&gt; ::= \"int\" | \"float\" | \"string\" | \"char\"\n\n&lt;variable&gt; ::= &lt;type&gt; &lt;indent&gt; &lt;variable-name&gt; [ \"=\" &lt;expression&gt; ] \";\"\n\n&lt;variable-name&gt; ::= &lt;letter&gt; | &lt;variable-name&gt; &lt;letter&gt; | &lt;variable-name&gt; &lt;digit&gt;\n\n&lt;letter&gt; ::= &lt;utf16-char&gt; - &lt;excluded-letter&gt;\n\n&lt;excluded-letter&gt; ::= &lt;special&gt; | &lt;space&gt; | &lt;tabulation&gt; | &lt;line-break&gt;\n\n&lt;space&gt; ::= \" \"\n\n&lt;tabulation&gt; ::= \"\\t\"\n\n&lt;line-break&gt; ::= \"\\n\"\n\n&lt;special&gt; ::= \"!\" | \"^\" | \"&amp;\" | \"(\" | \")\" | \"=\" | \"[\" | \"]\" | \"{\" | \"}\" | \"|\" | \"\\\" | \":\" | \";\" | \"'\" | '\"' | \"&lt;\" | \"&gt;\" | \",\" | \".\" | \"?\" | \"/\" | \"`\" | \"~\" | \"+\" | \"-\" | \"*\" | \"/\" | \"%\"\n\n&lt;number&gt; ::= &lt;int&gt; | &lt;float&gt;\n\n&lt;int&gt; ::= &lt;digit&gt; | &lt;int&gt; &lt;digit&gt;\n\n&lt;float&gt; ::= &lt;int&gt; \".\" &lt;int&gt;\n\n&lt;digit&gt; ::= \"0\"...\"9\"\n\n&lt;indent&gt; ::= &lt;space&gt; | &lt;tabulation&gt; | &lt;indent&gt; &lt;indent&gt;\n\n&lt;expression&gt; ::= &lt;expression&gt; &lt;op&gt; &lt;expression&gt;\n                | \"(\" &lt;expression&gt; \")\"\n                | &lt;indent&gt;\n                | &lt;number&gt;\n                | &lt;string&gt;\n                | &lt;char&gt;\n\n&lt;op&gt; ::= \"+\" | \"-\" | \"*\" | \"/\" | \"%\" | \"==\" | \"!=\" | \"&lt;\" | \"&gt;\" | \"&lt;=\" | \"&gt;=\" | \"&amp;&amp;\" | \"||\"\n\n&lt;string&gt; ::= '\"' &lt;char&gt;* '\"'\n\n&lt;char&gt; ::= &lt;utf16-char&gt;\n\n&lt;statement&gt; ::= ( &lt;variable&gt; | &lt;expression&gt; | &lt;if&gt; | &lt;while&gt; | &lt;for&gt; | &lt;return&gt; | &lt;function-call&gt; ) \";\"\n\n&lt;return&gt; ::= \"return\" &lt;indent&gt; ( &lt;expression&gt; | &lt;variable&gt; | &lt;function-call&gt; ) \";\"\n\n&lt;function-call&gt; ::= &lt;function-name&gt; \"(\" &lt;function-call-args&gt; \")\"\n\n&lt;if&gt; ::= \"if\" &lt;indent&gt; \"(\" &lt;expression&gt; \")\" &lt;indent&gt; \"{\" &lt;statement&gt; \"}\" [ &lt;else-if&gt; ] [ &lt;else&gt; ]\n\n&lt;else-if&gt; ::= \"else\" &lt;indent&gt; \"if\" &lt;indent&gt; \"(\" &lt;expression&gt; \")\" &lt;indent&gt; \"{\" &lt;statement&gt; \"}\" [ &lt;else-if&gt; ] [ &lt;else&gt; ]\n\n&lt;else&gt; ::= \"else\" &lt;indent&gt; \"{\" &lt;statement&gt; \"}\"\n\n&lt;while&gt; ::= \"while\" &lt;indent&gt; \"(\" &lt;expression&gt; \")\" &lt;indent&gt; \"{\" &lt;statement&gt; \"}\"\n\n&lt;for&gt; ::= \"for\" &lt;indent&gt; \"(\" &lt;variable&gt; \";\" &lt;expression&gt; \";\" &lt;expression&gt; \")\" &lt;indent&gt; \"{\" &lt;statement&gt; \"}\"\n\n&lt;function&gt; ::= \"fun\" &lt;indent&gt; &lt;function-name&gt; \"(\" &lt;function-args&gt; \")\" \":\" &lt;return-type&gt; &lt;function-body&gt;\n\n&lt;function-name&gt; ::= &lt;letter&gt; | &lt;function-name&gt; &lt;letter&gt; | &lt;function-name&gt; &lt;digit&gt;\n\n&lt;function-args&gt; ::= &lt;function-arg&gt; | &lt;function-arg&gt; \",\" &lt;function-args&gt;\n\n&lt;function-arg&gt; ::= &lt;type&gt; &lt;indent&gt; &lt;variable-name&gt;\n\n&lt;return-type&gt; ::= &lt;type&gt;\n\n&lt;function-body&gt; ::= &lt;indent&gt; &lt;statement&gt; | &lt;indent&gt; &lt;statement&gt; &lt;function-body&gt;\n\n&lt;comment&gt; ::= \"//\" &lt;utf16-char&gt;* \"\\n\"\n\n&lt;multiline-comment&gt; ::= \"/*\" &lt;utf16-char&gt;* \"*/\"\n\n&lt;file&gt; ::= &lt;function&gt; | &lt;statement&gt; | &lt;comment&gt; | &lt;multiline-comment&gt; | &lt;file&gt; &lt;file&gt;\n\n&lt;define&gt; ::= \"#define\" &lt;indent&gt; &lt;variable-name&gt; &lt;indent&gt; &lt;expression&gt; &lt;line-break&gt;\n\n&lt;include&gt; ::= \"#include\" &lt;indent&gt; &lt;string&gt; &lt;line-break&gt;\n</code></pre>"},{"location":"syntax/","title":"Syntaxe du langage C--","text":""},{"location":"syntax/#bnf-backus-naur-form-brute","title":"BNF (Backus-Naur Form) brute","text":"<p>Si vous voulez voir la syntax BNF brute, sans les explications et les exemples, c'est par ici : BNF brute</p>"},{"location":"syntax/#types","title":"Types","text":"<p>Notre langage supporte les types suivants :</p> Type Description <code>int</code> Entier sign\u00e9 sur 32 bits <code>float</code> Nombre \u00e0 virgule flottante sur 32 bits <code>string</code> Cha\u00eene de caract\u00e8res <code>char</code> Caract\u00e8re <p>Suivant la syntaxe de notre langage, les types sont d\u00e9finis comme suit :</p> <pre><code>&lt;type&gt; ::= \"int\" | \"float\" | \"string\" | \"char\"\n</code></pre>"},{"location":"syntax/#variables","title":"Variables","text":"<p>Pour d\u00e9clarer une variable, il faut pr\u00e9ciser son type, son nom et \u00e9ventuellement sa valeur, suivant la syntaxe suivante :</p> <pre><code>&lt;variable&gt; ::= &lt;type&gt; &lt;indent&gt; &lt;variable-name&gt; [ \"=\" &lt;expression&gt; ] \";\"\n\n&lt;variable-name&gt; ::= &lt;letter&gt; | &lt;variable-name&gt; &lt;letter&gt; | &lt;variable-name&gt; &lt;digit&gt;\n</code></pre> <p>Voici quelques exemples de d\u00e9clarations de variables :</p> <pre><code>int a;\nint b = 2;\nfloat c = 3.14;\nstring d = \"Hello world!\";\nchar e = 'a';\n</code></pre>"},{"location":"syntax/#lettres","title":"Lettres","text":"<p>Les lettres sont des caract\u00e8res Unicode, \u00e0 l'exception de certains caract\u00e8res sp\u00e9ciaux, suivant la syntaxe suivante :</p> <pre><code>&lt;letter&gt; ::= &lt;utf16-char&gt; - &lt;excluded-letter&gt;\n\n&lt;excluded-letter&gt; ::= &lt;special&gt; | &lt;space&gt; | &lt;tabulation&gt; | &lt;line-break&gt;\n\n&lt;space&gt; ::= \" \"\n\n&lt;tabulation&gt; ::= \"\\t\"\n\n&lt;line-break&gt; ::= \"\\n\"\n\n&lt;special&gt; ::= \"!\" | \"^\" | \"&amp;\" | \"(\" | \")\" | \"=\" | \"[\" | \"]\" | \"{\" | \"}\" | \"|\" | \"\\\" | \":\" | \";\" | \"'\" | '\"' | \"&lt;\" | \"&gt;\" | \",\" | \".\" | \"?\" | \"/\" | \"`\" | \"~\" | \"+\" | \"-\" | \"*\" | \"/\" | \"%\"\n</code></pre> <p>Voici quelques exemples de lettres :</p> <pre><code>int Hello_world;\nfloat \u3053\u3093\u306b\u3061\u306f\u4e16\u754c;\nchar \u4f60\u597d\u4e16\u754c;\nstring \uc548\ub155\ud558\uc138\uc694 \uc138\uacc4;\nchar \ud83d\ude04\ud83e\udd16\ud83d\udc4d;\n</code></pre>"},{"location":"syntax/#chiffres","title":"Chiffres","text":"<p>Les chiffres sont des caract\u00e8res Unicode, suivant la syntaxe suivante :</p> <pre><code>&lt;number&gt; ::= &lt;int&gt; | &lt;float&gt;\n\n&lt;int&gt; ::= &lt;digit&gt; | &lt;int&gt; &lt;digit&gt;\n\n&lt;float&gt; ::= &lt;int&gt; \".\" &lt;int&gt;\n\n&lt;digit&gt; ::= \"0\"...\"9\"\n</code></pre> <p>Voici quelques exemples de chiffres :</p> <pre><code>int a = 42;\nfloat b = 3.14;\nint c = 0;\nfloat d = 0.0;\nint e = -123456789;\nfloat f = -123.456789;\n</code></pre>"},{"location":"syntax/#indent","title":"Indent","text":"<p>L'indentation est utilis\u00e9e pour s\u00e9parer les blocs de code. Elle est compos\u00e9e d'espaces et de tabulations, suivant la syntaxe suivante :</p> <pre><code>&lt;indent&gt; ::= &lt;space&gt; | &lt;tabulation&gt; | &lt;indent&gt; &lt;indent&gt;\n</code></pre> <p>Voici quelques exemples d'indentation :</p> <pre><code>int a = 42;\nif (a == 42) {\nint b = 3.14;\nif (b == 3.14) {\nint c = 0;\n}\n}\n</code></pre>"},{"location":"syntax/#expressions","title":"Expressions","text":"<p>Une expression est une suite de caract\u00e8res qui peut \u00eatre \u00e9valu\u00e9e en une valeur. Les expressions peuvent \u00eatre utilis\u00e9es dans les variables, les conditions, les boucles, les fonctions, etc.</p> <p>Les expressions sont compos\u00e9es de variables, de chiffres, de cha\u00eenes de caract\u00e8res, de caract\u00e8res et d'op\u00e9rateurs, suivant la syntaxe suivante :</p> <pre><code>&lt;expression&gt; ::= &lt;expression&gt; &lt;op&gt; &lt;expression&gt;\n                | \"(\" &lt;expression&gt; \")\"\n                | &lt;indent&gt;\n                | &lt;number&gt;\n                | &lt;string&gt;\n                | &lt;char&gt;\n\n&lt;op&gt; ::= \"+\" | \"-\" | \"*\" | \"/\" | \"%\" | \"==\" | \"!=\" | \"&lt;\" | \"&gt;\" | \"&lt;=\" | \"&gt;=\" | \"&amp;&amp;\" | \"||\"\n\n&lt;string&gt; ::= '\"' &lt;char&gt;* '\"'\n\n&lt;char&gt; ::= &lt;utf16-char&gt;\n</code></pre> <p>Voici quelques exemples d'expressions :</p> <pre><code>int a = 42;     // 42\nint b = 3.14;   // 3.14\nint c = a + b;  // 45\nint d = a * b;  // 126\nint e = a / b;  // 13\nint f = a % b;  // 0\nchar g = 'a';   // a\nstring h = \"Hello world!\"; // Hello world!\nchar i = '\ud83d\ude04';  // \ud83d\ude04\nstring j = \"some \\\"string\\\" with \\\"quotes\\\" and chinese characters \u4f60\u597d\u4e16\u754c\"; // some \"string\" with \"quotes\" and chinese characters \u4f60\u597d\u4e16\u754c\nint k = 1 + 2 * 3;   // 7\nint l = (1 + 2) * 3; // 9\nint m = k == l;      // 0\n</code></pre>"},{"location":"syntax/#statements","title":"Statements","text":"<p>Un statement peut \u00eatre une variable, une expression, une condition, une boucle, un retour ou un appel de fonction, suivant la syntaxe suivante :</p> <pre><code>&lt;statement&gt; ::= ( &lt;variable&gt; | &lt;expression&gt; | &lt;if&gt; | &lt;while&gt; | &lt;for&gt; | &lt;return&gt; | &lt;function-call&gt; ) \";\"\n</code></pre> <p>Voici quelques exemples de statements :</p> <pre><code>int a = 42;\nint b = 3.14;\nint c = add(a, b);\nif (a == 42) {\nc = 0;\n}\nwhile (c &lt; 10) {\nc = c + 1;\n}\nfor (int i = 0; i &lt; 10; i = i + 1) {\nc = c + 1;\n}\nreturn c;\n</code></pre>"},{"location":"syntax/#retours","title":"Retours","text":"<p>Les retours sont utilis\u00e9s pour retourner une valeur depuis une fonction, suivant la syntaxe suivante :</p> <pre><code>&lt;return&gt; ::= \"return\" &lt;indent&gt; ( &lt;expression&gt; | &lt;variable&gt; | &lt;function-call&gt; ) \";\"\n</code></pre> <p>Voici quelques exemples de retours :</p> <pre><code>int a = 42;\nreturn a;\n</code></pre> <pre><code>int a = 42;\nint b = 3.14;\nreturn add(a, b);\n</code></pre> <pre><code>int a = 42;\nint b = 3.14;\nreturn a + b;\n</code></pre>"},{"location":"syntax/#appels-de-fonctions","title":"Appels de fonctions","text":"<p>Les appels de fonctions sont utilis\u00e9s pour appeler une fonction avec des arguments, si elle en a, suivant la syntaxe suivante :</p> <pre><code>&lt;function-call&gt; ::= &lt;function-name&gt; \"(\" &lt;function-call-args&gt; \")\"\n</code></pre> <p>Voici quelques exemples d'appels de fonctions :</p> <pre><code>int a = 42;\nint b = 3.14;\nint c = add(a, b);\n</code></pre> <pre><code>int a = 42;\nint b = 3.14;\nint c = addThree(a, b, 1);\n</code></pre> <pre><code>int a = getNumber();\n</code></pre>"},{"location":"syntax/#conditions","title":"Conditions","text":"<p>Les conditions sont utilis\u00e9es pour ex\u00e9cuter un bloc de code si une expression est vraie, suivant la syntaxe suivante :</p> <pre><code>&lt;if&gt; ::= \"if\" &lt;indent&gt; \"(\" &lt;expression&gt; \")\" &lt;indent&gt; \"{\" &lt;statement&gt; \"}\" [ &lt;else-if&gt; ] [ &lt;else&gt; ]\n\n&lt;else-if&gt; ::= \"else\" &lt;indent&gt; \"if\" &lt;indent&gt; \"(\" &lt;expression&gt; \")\" &lt;indent&gt; \"{\" &lt;statement&gt; \"}\" [ &lt;else-if&gt; ] [ &lt;else&gt; ]\n\n&lt;else&gt; ::= \"else\" &lt;indent&gt; \"{\" &lt;statement&gt; \"}\"\n</code></pre> <p>Voici quelques exemples de conditions :</p> <pre><code>int a = 42;\nint b = 0;\nif (a == 42) {\nb = 3.14;\n}\n</code></pre> <pre><code>int a = 42;\nint b = 0;\nif (a != 42) {\nb = -1;\n} else {\nb = 3.14;\n}\n</code></pre> <pre><code>int a = 42;\nint b = 0;\nif (a &gt; 42) {\nb = 1;\n} else if (a &lt; 0) {\nb = -1;\n} else {\nb = 3.14;\n}\n</code></pre>"},{"location":"syntax/#boucles","title":"Boucles","text":"<p>Les boucles sont utilis\u00e9es pour ex\u00e9cuter un bloc de code plusieurs fois, suivant la syntaxe suivante :</p> <pre><code>&lt;while&gt; ::= \"while\" &lt;indent&gt; \"(\" &lt;expression&gt; \")\" &lt;indent&gt; \"{\" &lt;statement&gt; \"}\"\n\n&lt;for&gt; ::= \"for\" &lt;indent&gt; \"(\" &lt;variable&gt; \";\" &lt;expression&gt; \";\" &lt;expression&gt; \")\" &lt;indent&gt; \"{\" &lt;statement&gt; \"}\"\n</code></pre> <p>Voici quelques exemples de boucles :</p> <pre><code>int a = 0;\nwhile (a &lt; 10) {\na = a + 1;\n}\n</code></pre> <pre><code>int a = 0;\nfor (int i = 0; i &lt; 10; i = i + 1) {\na = a + 1;\n}\n</code></pre>"},{"location":"syntax/#fonctions","title":"Fonctions","text":"<p>Les fonctions sont utilis\u00e9es pour d\u00e9finir un bloc de code qui peut \u00eatre appel\u00e9 depuis d'autres blocs de code, en lui passant des arguments, si elle en a, suivant la syntaxe suivante :</p> <pre><code>&lt;function&gt; ::= \"fun\" &lt;indent&gt; &lt;function-name&gt; \"(\" &lt;function-args&gt; \")\" \":\" &lt;return-type&gt; &lt;function-body&gt;\n\n&lt;function-name&gt; ::= &lt;letter&gt; | &lt;function-name&gt; &lt;letter&gt; | &lt;function-name&gt; &lt;digit&gt;\n\n&lt;function-args&gt; ::= &lt;function-arg&gt; | &lt;function-arg&gt; \",\" &lt;function-args&gt;\n\n&lt;function-arg&gt; ::= &lt;type&gt; &lt;indent&gt; &lt;variable-name&gt;\n\n&lt;return-type&gt; ::= &lt;type&gt;\n\n&lt;function-body&gt; ::= &lt;indent&gt; &lt;statement&gt; | &lt;indent&gt; &lt;statement&gt; &lt;function-body&gt;\n</code></pre> <p>Voici quelques exemples de fonctions :</p> <pre><code>fun add(int a, int b) : int {\nreturn a + b;\n}\n</code></pre> <pre><code>fun addThree(int a, int b, int c) : int {\nreturn a + b + c;\n}\n</code></pre> <pre><code>fun getNumber() : int {\nreturn 42;\n}\n</code></pre>"},{"location":"syntax/#commentaires","title":"Commentaires","text":"<p>Les commentaires sont utilis\u00e9s pour commenter le code, permettant de donner des informations sur le code, sans que cela ne modifie le comportement du programme, suivant la syntaxe suivante :</p> <pre><code>&lt;comment&gt; ::= \"//\" &lt;utf16-char&gt;* \"\\n\"\n\n&lt;multiline-comment&gt; ::= \"/*\" &lt;utf16-char&gt;* \"*/\"\n</code></pre> <p>Voici quelques exemples de commentaires :</p> <pre><code>// Voici un commentaire en fin de ligne\nint a = 42; // Voici un commentaire en fin de ligne\nint b = 3.14; // Voici un commentaire en fin de ligne\nint c = add(a, b); // Voici un commentaire en fin de ligne\n// Tout ce qui est apr\u00e8s // est ignor\u00e9\n</code></pre> <pre><code>/*\nVoici un commentaire\nsur plusieurs lignes\nqui peut \u00eatre utilis\u00e9\nsur une ou plusieurs lignes\n*/\nint a = 42;\nint b = 3.14;\nint c = /* Ce type de commentaire peut meme \u00eatre int\u00e9grer en plein milieu du code */ add(a, b);\n// Tout ce qui est entre /* et */ est ignor\u00e9\n</code></pre>"},{"location":"syntax/#fichiers","title":"Fichiers","text":"<p>Un fichier est compos\u00e9 de fonctions, de statements et de commentaires, un fichier doit contenir une fonction <code>main</code> ou \u00eatre inclus dans un autre fichier, suivant la syntaxe suivante :</p> <pre><code>&lt;file&gt; ::= &lt;function&gt; | &lt;statement&gt; | &lt;comment&gt; | &lt;multiline-comment&gt; | &lt;file&gt; &lt;file&gt;\n</code></pre> <p>Voici un exemple de fichier :</p> <pre><code>fun add(int a, int b) : int {\nreturn a + b;\n}\n\nfun addThree(int a, int b, int c) : int {\nreturn a + b + c;\n}\n\nfun getNumber() : int {\nreturn 42;\n}\n\nfun main() : int {\nint a = 42;\nint b = 3.14;\nint c = add(a, b);\nif (a == 42) {\nc = 0;\n}\nwhile (c &lt; 10) {\nc = c + 1;\n}\nfor (int i = 0; i &lt; 10; i = i + 1) {\nc = c + 1;\n}\nint d = getNumber();\nint e = addThree(a, b, d);\nreturn e;\n}\n</code></pre>"},{"location":"syntax/#define","title":"Define","text":"<p>Les define sont utilis\u00e9s pour d\u00e9finir des constantes, suivant la syntaxe suivante :</p> <pre><code>&lt;define&gt; ::= \"#define\" &lt;indent&gt; &lt;variable-name&gt; &lt;indent&gt; &lt;expression&gt; &lt;line-break&gt;\n</code></pre> <p>Voici quelques exemples de define :</p> <pre><code>#define PI 3.14\n#define HELLO_WORLD \"Hello world!\"\n#define TRUE 1\n#define FALSE 0\n\nfloat a = PI;           // float a = 3.14;\nstring b = HELLO_WORLD; // string b = \"Hello world!\";\nint c = TRUE;           // int c = 1;\nint d = FALSE;          // int d = 0;\n</code></pre>"},{"location":"syntax/#include","title":"Include","text":"<p>Les include sont utilis\u00e9s pour inclure le contenu d'un fichier dans un autre fichier. Les include r\u00e9cursifs sont bloqu\u00e9s pour \u00e9viter les boucles infinies. La syntaxe est la suivante :</p> <pre><code>&lt;include&gt; ::= \"#include\" &lt;indent&gt; &lt;string&gt; &lt;line-break&gt;\n</code></pre> <p>Voici quelques exemples d'include :</p> <p><code>getNumber.cmm</code> :</p> <pre><code>fun getNumber() : int {\nreturn 42;\n}\n</code></pre> <p><code>main.cmm</code> :</p> <pre><code>#include \"getNumber.cmm\"\n\nfun main() : int {\nreturn getNumber();\n}\n</code></pre> <p>Voici un exemple d'include r\u00e9cursif qui est bloqu\u00e9 :</p> <p><code>add.cmm</code> :</p> <pre><code>fun add(int a, int b) : int {\nreturn a + b;\n}\n\n#include \"main.cmm\"\n</code></pre> <p><code>main.cmm</code> :</p> <pre><code>#include \"add.cmm\"\n\nfun main() : int {\nreturn add(21, 21);\n}\n</code></pre> <p>donne :</p> <pre><code>fun add(int a, int b) : int {\nreturn a + b;\n}\n\nfun main() : int {\nreturn add(21, 21);\n}\n</code></pre>"},{"location":"syntax/#exemples","title":"Exemples","text":"<p>Voici quelques exemples de programmes en C--</p>"},{"location":"syntax/#factorielle-et-fibonacci","title":"Factorielle et Fibonacci","text":"<p><code>factorial.cmm</code> :</p> <pre><code>fun factorial(int n) : int {\nif (n == 0) {\nreturn 1;\n} else {\nreturn n * factorial(n - 1);\n}\n}\n</code></pre> <p><code>fibonacci.cmm</code> :</p> <pre><code>fun fibonacci(int n) : int {\nif (n == 0) {\nreturn 0;\n} else if (n == 1) {\nreturn 1;\n} else {\nreturn fibonacci(n - 1) + fibonacci(n - 2);\n}\n}\n</code></pre> <p><code>main.cmm</code> :</p> <pre><code>#include \"factorial.cmm\"\n#include \"fibonacci.cmm\"\n\nfun main() : int {\nint a = factorial(5);\nint b = fibonacci(10);\nint c = 0;\n\nif (a &lt; b) {\nc = a;\n} else {\nc = b;\n}\n\nreturn c;\n}\n</code></pre>"}]}