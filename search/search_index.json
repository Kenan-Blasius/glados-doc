{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GLaDOS","text":""},{"location":"#description","title":"Description","text":"<p>GLaDOS est un projet de cr\u00e9ation de langage de programmation.</p> <p>Ce projet est divis\u00e9 en 2 parties :</p> <ol> <li>Un compilateur<ol> <li>Un Parser qui transforme un fichier de code en AST<ol> <li>Un lexer qui transforme un fichier de code en tokens</li> <li>Un parser qui transforme les tokens en Sexpr</li> <li>Un parser qui transforme les Sexpr en AST</li> </ol> </li> <li>Un compilateur qui transforme l'AST en bytecode puis en fichier binaire<ol> <li>Un compilateur qui transforme l'AST en bytecode</li> <li>Un compilateur qui transforme le bytecode en fichier binaire</li> </ol> </li> </ol> </li> <li>Une machine virtuelle<ol> <li>Un programme qui lit un fichier binaire et l'execute</li> </ol> </li> </ol>"},{"location":"#installation","title":"Installation","text":""},{"location":"#a-partir-dun-binaire","title":"A partir d'un binaire","text":"<p>T\u00e9l\u00e9chargez les binaires dans la section realease du repo.</p>"},{"location":"#a-partir-du-code-source","title":"A partir du code source","text":"<p>Clonez le repo et lancez <code>make</code>.</p>"},{"location":"#syntaxe","title":"Syntaxe","text":"<p>La syntaxe du langage est d\u00e9crite ici : Syntaxe</p>"},{"location":"#utilisation","title":"Utilisation","text":"<p>Lancez <code>./glados &lt;fichier&gt;</code> pour compiler un fichier <code>.bin</code> puis <code>./eval &lt;fichier.bin&gt;</code> pour l'executer.</p>"},{"location":"#auteurs","title":"Auteurs","text":"<ul> <li>Kenan Blasius</li> <li>Niels Ouvrard</li> <li>Cl\u00e9ment Montoya</li> </ul>"},{"location":"assembly/","title":"Syntaxe de l'Assembly","text":""},{"location":"assembly/#operations","title":"Op\u00e9rations","text":"<pre><code>; D\u00e9finitions des types\n- LOAD_CONST      0x01\n- LOAD_VAR        0x02\n- STORE_VAR       0x03\n- BINARY_OP       0x04\n- UNARY_OP        0x05\n- COMPARE_OP      0x06\n- JUMP_IF_TRUE    0x07\n- JUMP_IF_FALSE   0x08\n- JUMP            0x09\n- JUMP_NEW_SCOPE  0x0A\n- POP             0x0B\n- DUP             0x0C\n- CALL            0x0D\n- RETURN          0x0E\n- LOAD_PC         0x0F\n- INDEX           0x10\n- SAVE_AT         0x11\n</code></pre> <ol> <li> <p>LOAD_CONST(index): Charge une valeur constante sur la pile. L'<code>index</code> pointe vers la position de la constante dans un pool de constantes.</p> </li> <li> <p>LOAD_VAR(name): Charge la valeur d'une variable sur la pile. Le <code>name</code> est l'identifiant de la variable.</p> </li> <li> <p>STORE_VAR(name): Stocke la valeur en haut de la pile dans la variable avec le <code>name</code> donn\u00e9.</p> </li> <li> <p>BINARY_OP(operator): Effectue une op\u00e9ration binaire sur les deux valeurs sup\u00e9rieures de la pile. L'<code>operator</code> indique l'op\u00e9ration (addition, soustraction, multiplication, etc.).</p> </li> <li> <p>UNARY_OP(operator): Effectue une op\u00e9ration unaire sur la valeur sup\u00e9rieure de la pile. L'<code>operator</code> indique l'op\u00e9ration (n\u00e9gation, NOT bit \u00e0 bit, etc.).</p> </li> <li> <p>COMPARE_OP(operator): Compare les deux valeurs sup\u00e9rieures de la pile en utilisant l'<code>operator</code> sp\u00e9cifi\u00e9 (\u00e9gal, non \u00e9gal, inf\u00e9rieur, sup\u00e9rieur, etc.).</p> </li> <li> <p>JUMP_IF_TRUE(target): Saute \u00e0 l'instruction <code>target</code> sp\u00e9cifi\u00e9e si la valeur sup\u00e9rieure de la pile est vraie.</p> </li> <li> <p>JUMP_IF_FALSE(target): Saute \u00e0 l'instruction <code>target</code> sp\u00e9cifi\u00e9e si la valeur sup\u00e9rieure de la pile est fausse.</p> </li> <li> <p>JUMP(target): Saut inconditionnel vers l'instruction <code>target</code> sp\u00e9cifi\u00e9e.</p> </li> <li> <p>JUMP_NEW_SCOPE(target): Saut inconditionnel vers l'instruction <code>target</code> sp\u00e9cifi\u00e9e et cr\u00e9e une nouvelle port\u00e9e vide de variables.</p> </li> <li> <p>POP: D\u00e9pile la valeur sup\u00e9rieure de la pile.</p> </li> <li> <p>DUP: Duplique la valeur sup\u00e9rieure de la pile.</p> </li> <li> <p>CALL(func_name, num_args): Appelle une fonction avec le <code>func_name</code> et <code>num_args</code> sp\u00e9cifi\u00e9s comme arguments.</p> </li> <li> <p>RETURN: Retourne de la fonction en cours.</p> </li> <li> <p>LOAD_PC: Charge le compteur de programme sur la pile.</p> </li> <li> <p>INDEX: Place dans la stack la valeur du string \u00e0 l'index donn\u00e9. L'index est le premier \u00e9l\u00e9ment de la stack, la string est le deuxi\u00e8me.</p> </li> <li> <p>SAVE_AT: Sauvegarde dans la string \u00e0 l'index donn\u00e9 la valeur donn\u00e9e. Le string est le premier \u00e9l\u00e9ment de la stack, l'index le deuxi\u00e8me, la valeur le troisi\u00e8me.</p> </li> </ol>"},{"location":"assembly/#exemples","title":"Exemples","text":""},{"location":"assembly/#exemple-1","title":"Exemple 1","text":"<pre><code>fun main (int spain\ud83c\uddea\ud83c\uddf8) : int\n{\nreturn 0;\n}\n</code></pre> <p>Est converti en AST:</p> <pre><code>-- AST\nFunAST \"main\" (AST [IntTypeAST,SymbolAST \"spain\ud83c\uddea\ud83c\uddf8\"]) (FunTypeAST (AST [IntTypeAST])) (ReturnAST (AST [IntAST 0]))\n\n\n-- AST (human readable)\nFunAST main\n|   AST\n|   |   IntTypeAST\n|   |   SymbolAST \"spain\ud83c\uddea\ud83c\uddf8\"\n|   FunTypeAST\n|   |   AST\n|   |   |   IntTypeAST\n|   ReturnAST\n|   |   AST\n|   |   |   IntAST 0\n</code></pre> <p>Qui est converti en bytecode:</p> <pre><code>32 FunEntryPoint \"main\" IntType\n37 StoreVarBefore spain\ud83c\uddea\ud83c\uddf8 IntType  # sauvagarde de la variable spain\ud83c\uddea\ud83c\uddf8\n43 LoadConst 0 IntType\n49 Return\n50 Return                          # return deus fois si l'utilisateur ne fait pas de return depuis le main\n</code></pre> <p>Devient:</p> <pre><code>32 Jump 37                          # saute dans la fonction main, les 32 premiers octets sont le header\n37 StoreVar 0 IntType\n43 LoadConst 0 IntType\n49 Return\n50 Return\n</code></pre> <p>Le bytecode final est:</p> <pre><code># le magic number\n122,105,122,105,\n# Le header: \"This is the comment section\\0\"\n84,104,105,115,32,105,115,32,116,104,101,32,99,111,109,109,101,110,116,32,115,101,99,116,105,111,110,0,\n\n9,37,0,0,0,  # Jump 37\n3,0,0,0,0,1, # StoreVar 0 IntType\n1,0,0,0,0,1, # LoadConst 0 IntType\n14,          # Return\n14           # Return\n</code></pre>"},{"location":"assembly/#exemple-2","title":"Exemple 2","text":"<pre><code>fun add (int a, int b) : (int)\n{\nreturn a + b;\n}\n\nfun main () : int\n{\nint south_corea\ud83c\uddf0\ud83c\uddf7 = 7;\nint north_corea\ud83c\uddf0\ud83c\uddf5 = 3;\n\nint corea = add(south_corea\ud83c\uddf0\ud83c\uddf7, north_corea\ud83c\uddf0\ud83c\uddf5);\n\nreturn corea;\n}\n</code></pre> <p>Est converti en AST:</p> <pre><code>AST\n|   FunAST add\n|   |   AST\n|   |   |   AST\n|   |   |   |   IntTypeAST\n|   |   |   |   SymbolAST a\n|   |   |   AST\n|   |   |   |   IntTypeAST\n|   |   |   |   SymbolAST b\n|   |   FunTypeAST\n|   |   |   AST\n|   |   |   |   AST\n|   |   |   |   |   IntTypeAST\n|   |   ReturnAST\n|   |   |   PlusAST\n|   |   |   |   AST\n|   |   |   |   |   SymbolAST a\n|   |   |   |   AST\n|   |   |   |   |   SymbolAST b\n|   FunAST main\n|   |   DeadLeafAST\n|   |   FunTypeAST\n|   |   |   AST\n|   |   |   |   IntTypeAST\n|   |   AST\n|   |   |   AssignAST\n|   |   |   |   AST\n|   |   |   |   |   IntTypeAST\n|   |   |   |   |   SymbolAST south_corea\ud83c\uddf0\ud83c\uddf7\n|   |   |   |   AST\n|   |   |   |   |   IntAST 7\n|   |   |   AssignAST\n|   |   |   |   AST\n|   |   |   |   |   IntTypeAST\n|   |   |   |   |   SymbolAST north_corea\ud83c\uddf0\ud83c\uddf5\n|   |   |   |   AST\n|   |   |   |   |   IntAST 3\n|   |   |   AssignAST\n|   |   |   |   AST\n|   |   |   |   |   IntTypeAST\n|   |   |   |   |   SymbolAST corea\n|   |   |   |   AST\n|   |   |   |   |   SymbolAST add\n|   |   |   |   |   AST\n|   |   |   |   |   |   AST\n|   |   |   |   |   |   |   SymbolAST south_corea\ud83c\uddf0\ud83c\uddf7\n|   |   |   |   |   |   AST\n|   |   |   |   |   |   |   SymbolAST north_corea\ud83c\uddf0\ud83c\uddf5\n|   |   |   ReturnAST\n|   |   |   |   AST\n|   |   |   |   |   SymbolAST corea\n</code></pre> <p>Qui est converti en bytecode:</p> <pre><code>32 Jump 65\n# add\n37 StoreVar 0 IntType\n43 StoreVar 1 IntType\n49 LoadVar 0 IntType\n55 LoadVar 1 IntType\n61 BinaryOp +\n63 Return\n64 Return\n# main\n65 LoadConst 7 IntType\n71 StoreVar 0 IntType\n77 LoadConst 3 IntType\n83 StoreVar 1 IntType\n89 LoadVar 0 IntType\n95 LoadVar 1 IntType\n101 LoadPC\n102 JumpNewScope 37\n107 StoreVar 2 IntType\n113 LoadVar 2 IntType\n119 Return\n120 Return\n</code></pre> <p>Comme on peut le voir, les variables sont stock\u00e9es sous forme d'id, et les fonctions aussi.</p> <p>Devient:</p> <pre><code># Le magic number\n122,105,122,105,\n# Le header: \"This is the comment section\\0\"\n84,104,105,115,32,105,115,32,116,104,101,32,99,111,109,109,101,110,116,32,115,101,99,116,105,111,110,0,\n\n9,65,0,0,0,  # Jump 65\n3,0,0,0,0,1, # StoreVar 0 IntType\n3,1,0,0,0,1, # StoreVar 1 IntType\n2,0,0,0,0,1, # LoadVar 0 IntType\n2,1,0,0,0,1, # LoadVar 1 IntType\n4,43,        # BinaryOp +\n14,          # Return\n14,          # Return\n1,7,0,0,0,1, # LoadConst 7 IntType\n3,0,0,0,0,1, # StoreVar 0 IntType\n1,3,0,0,0,1, # LoadConst 3 IntType\n3,1,0,0,0,1, # StoreVar 1 IntType\n2,0,0,0,0,1, # LoadVar 0 IntType\n2,1,0,0,0,1, # LoadVar 1 IntType\n15,          # LoadPC\n10,37,0,0,0, # JumpNewScope 37\n3,2,0,0,0,1, # StoreVar 2 IntType\n2,2,0,0,0,1, # LoadVar 2 IntType\n14,          # Return\n14           # Return\n</code></pre> <p>Comme on peut le voir, les instructions <code>LoadConst</code>, <code>LoadVar</code> et <code>StoreVar</code> fonctionnent comme ceci:</p> <pre><code>First byte:\n0x01 # LoadConst\n0x02 # LoadVar\n0x03 # StoreVar\n\n4 octets suivants sont l id de la variable ou, la valeur de la constante\n0x00, 0x00, 0x00, 0x00 # 0\n\n1 octet suivant est le type de la variable\n0x01 # IntType\n0x02 # FloatType\n0x03 # StringType\n0x04 # BoolType\n</code></pre>"},{"location":"assembly/#les-syscalls","title":"Les syscalls","text":"<pre><code>print (int value | char value | float value | string value)\n// Syscall Number: 1 : Ecrire dans le stdout\n\ngetline ()\n// Syscall Number: 2 : Lire une ligne depuis le stdin\n\nreadFile (string path)\n// Syscall Number: 3 : Lire un fichier\n\nwriteInFile (string path, string content)\n// Syscall Number: 4 : Ecrire dans un fichier\n\nappendInFile (string path, string content)\n// Syscall Number: 5 : Ecrire \u00e0 la fin d`un fichier\n\nexit (int status)\n// Syscall Number: 60 : Termine le processus et retourne le status de sortie au parent.\n</code></pre>"},{"location":"assembly/#exemple-of-syscall-usage","title":"Exemple of syscall usage","text":"<pre><code>fun main () : int\n{\nprint(\"\\tUser 1:\\n\");\nprint(\"Enter a name:\\n\");\nstring name = getline();\n\nprint(\"Enter an age:\\n\");\nstring age = getline();\n\nprint(\"Enter a car:\\n\");\nstring car = getline();\n\nwriteInFile(\"file.json\", \"[\\n\\t{\\n\\t\\t\\\"name\\\": \\\"\" + name + \"\\\",\\n\\t\\t\\\"age\\\": \\\"\" + age + \"\\\",\\n\\t\\t\\\"car\\\": \\\"\" + car + \"\\\"\\n\\t}\");\n\n\nprint(\"\\tUser 2:\\n\");\nprint(\"Enter a name:\\n\");\nstring name = getline();\n\nprint(\"Enter an age:\\n\");\nstring age = getline();\n\nprint(\"Enter a car:\\n\");\nstring car = getline();\n\nappendInFile(\"file.json\", \",\\n\\t{\\n\\t\\t\\\"name\\\": \\\"\" + name + \"\\\",\\n\\t\\t\\\"age\\\": \\\"\" + age + \"\\\",\\n\\t\\t\\\"car\\\": \\\"\" + car + \"\\\"\\n\\t}\\n]\\n\");\n\nreturn 0;\n}\n</code></pre>"},{"location":"features/","title":"Fonctionnalit\u00e9s","text":""},{"location":"features/#introduction","title":"Introduction","text":"<p>Ce document a pour but de vous pr\u00e9senter les fonctionnalit\u00e9s de notre langage de programmation.</p> <p>Il est divis\u00e9 en plusieurs parties, chacune d'entre elles vous pr\u00e9sentera des fonctionnalit\u00e9s de notre langage.</p> <p>Nous vous conseillons de suivre les tutoriels avant de lire ce document.</p>"},{"location":"features/#sommaire","title":"Sommaire","text":"<ul> <li>Fonctionnalit\u00e9s - Les variables</li> <li>Fonctionnalit\u00e9s - Les op\u00e9rateurs</li> <li>Fonctionnalit\u00e9s - Le type string</li> </ul>"},{"location":"raw-bnf/","title":"Syntaxe BNF (Backus-Naur Form) brute du langage C--","text":"<pre><code>&lt;type&gt; ::= \"int\" | \"float\" | \"string\" | \"char\"\n\n&lt;variable&gt; ::= &lt;type&gt; &lt;indent&gt; &lt;variable-name&gt; [ \"=\" &lt;expression&gt; ] \";\"\n\n&lt;variable-name&gt; ::= &lt;letter&gt; | &lt;variable-name&gt; &lt;letter&gt; | &lt;variable-name&gt; &lt;digit&gt;\n\n&lt;letter&gt; ::= &lt;utf16-char&gt; - &lt;excluded-letter&gt;\n\n&lt;excluded-letter&gt; ::= &lt;special&gt; | &lt;space&gt; | &lt;tabulation&gt; | &lt;line-break&gt;\n\n&lt;space&gt; ::= \" \"\n\n&lt;tabulation&gt; ::= \"\\t\"\n\n&lt;line-break&gt; ::= \"\\n\"\n\n&lt;special&gt; ::= \"!\" | \"^\" | \"&amp;\" | \"(\" | \")\" | \"=\" | \"[\" | \"]\" | \"{\" | \"}\" | \"|\" | \"\\\" | \":\" | \";\" | \"'\" | '\"' | \"&lt;\" | \"&gt;\" | \",\" | \".\" | \"?\" | \"/\" | \"`\" | \"~\" | \"+\" | \"-\" | \"*\" | \"/\" | \"%\"\n\n&lt;number&gt; ::= &lt;int&gt; | &lt;float&gt;\n\n&lt;int&gt; ::= &lt;digit&gt; | &lt;int&gt; &lt;digit&gt;\n\n&lt;float&gt; ::= &lt;int&gt; \".\" &lt;int&gt;\n\n&lt;digit&gt; ::= \"0\"...\"9\"\n\n&lt;indent&gt; ::= &lt;space&gt; | &lt;tabulation&gt; | &lt;indent&gt; &lt;indent&gt;\n\n&lt;expression&gt; ::= &lt;expression&gt; &lt;op&gt; &lt;expression&gt;\n                | \"(\" &lt;expression&gt; \")\"\n                | &lt;indent&gt;\n                | &lt;number&gt;\n                | &lt;string&gt;\n                | &lt;char&gt;\n\n&lt;op&gt; ::= \"+\" | \"-\" | \"*\" | \"/\" | \"%\" | \"==\" | \"!=\" | \"&lt;\" | \"&gt;\" | \"&lt;=\" | \"&gt;=\" | \"&amp;&amp;\" | \"||\"\n\n&lt;string&gt; ::= '\"' &lt;char&gt;* '\"'\n\n&lt;char&gt; ::= &lt;utf16-char&gt;\n\n&lt;statement&gt; ::= ( &lt;variable&gt; | &lt;expression&gt; | &lt;if&gt; | &lt;while&gt; | &lt;for&gt; | &lt;return&gt; | &lt;function-call&gt; ) \";\"\n\n&lt;return&gt; ::= \"return\" &lt;indent&gt; ( &lt;expression&gt; | &lt;variable&gt; | &lt;function-call&gt; ) \";\"\n\n&lt;function-call&gt; ::= &lt;function-name&gt; \"(\" &lt;function-call-args&gt; \")\"\n\n&lt;if&gt; ::= \"if\" &lt;indent&gt; \"(\" &lt;expression&gt; \")\" &lt;indent&gt; \"{\" &lt;statement&gt; \"}\" [ &lt;else-if&gt; ] [ &lt;else&gt; ]\n\n&lt;else-if&gt; ::= \"else\" &lt;indent&gt; \"if\" &lt;indent&gt; \"(\" &lt;expression&gt; \")\" &lt;indent&gt; \"{\" &lt;statement&gt; \"}\" [ &lt;else-if&gt; ] [ &lt;else&gt; ]\n\n&lt;else&gt; ::= \"else\" &lt;indent&gt; \"{\" &lt;statement&gt; \"}\"\n\n&lt;while&gt; ::= \"while\" &lt;indent&gt; \"(\" &lt;expression&gt; \")\" &lt;indent&gt; \"{\" &lt;statement&gt; \"}\"\n\n&lt;for&gt; ::= \"for\" &lt;indent&gt; \"(\" &lt;variable&gt; \";\" &lt;expression&gt; \";\" &lt;expression&gt; \")\" &lt;indent&gt; \"{\" &lt;statement&gt; \"}\"\n\n&lt;function&gt; ::= \"fun\" &lt;indent&gt; &lt;function-name&gt; \"(\" &lt;function-args&gt; \")\" \":\" &lt;return-type&gt; &lt;function-body&gt;\n\n&lt;function-name&gt; ::= &lt;letter&gt; | &lt;function-name&gt; &lt;letter&gt; | &lt;function-name&gt; &lt;digit&gt;\n\n&lt;function-args&gt; ::= &lt;function-arg&gt; | &lt;function-arg&gt; \",\" &lt;function-args&gt;\n\n&lt;function-arg&gt; ::= &lt;type&gt; &lt;indent&gt; &lt;variable-name&gt;\n\n&lt;return-type&gt; ::= &lt;type&gt;\n\n&lt;function-body&gt; ::= &lt;indent&gt; &lt;statement&gt; | &lt;indent&gt; &lt;statement&gt; &lt;function-body&gt;\n\n&lt;comment&gt; ::= \"//\" &lt;utf16-char&gt;* \"\\n\"\n\n&lt;multiline-comment&gt; ::= \"/*\" &lt;utf16-char&gt;* \"*/\"\n\n&lt;file&gt; ::= &lt;function&gt; | &lt;statement&gt; | &lt;comment&gt; | &lt;multiline-comment&gt; | &lt;file&gt; &lt;file&gt;\n\n&lt;define&gt; ::= \"#define\" &lt;indent&gt; &lt;variable-name&gt; &lt;indent&gt; &lt;expression&gt; &lt;line-break&gt;\n\n&lt;include&gt; ::= \"#include\" &lt;indent&gt; &lt;string&gt; &lt;line-break&gt;\n</code></pre>"},{"location":"syntax/","title":"Syntaxe du langage C--","text":""},{"location":"syntax/#bnf-backus-naur-form-brute","title":"BNF (Backus-Naur Form) brute","text":"<p>Si vous voulez voir la syntax BNF brute, sans les explications et les exemples, c'est par ici : BNF brute</p>"},{"location":"syntax/#types","title":"Types","text":"<p>Notre langage supporte les types suivants :</p> Type Description <code>int</code> Entier sign\u00e9 sur 32 bits <code>float</code> Nombre \u00e0 virgule flottante sur 32 bits <code>string</code> Cha\u00eene de caract\u00e8res <code>char</code> Caract\u00e8re <p>Suivant la syntaxe de notre langage, les types sont d\u00e9finis comme suit :</p> <pre><code>&lt;type&gt; ::= \"int\" | \"float\" | \"string\" | \"char\"\n</code></pre>"},{"location":"syntax/#variables","title":"Variables","text":"<p>Pour d\u00e9clarer une variable, il faut pr\u00e9ciser son type, son nom et \u00e9ventuellement sa valeur, suivant la syntaxe suivante :</p> <pre><code>&lt;variable&gt; ::= &lt;type&gt; &lt;indent&gt; &lt;variable-name&gt; [ \"=\" &lt;expression&gt; ] \";\"\n\n&lt;variable-name&gt; ::= &lt;letter&gt; | &lt;variable-name&gt; &lt;letter&gt; | &lt;variable-name&gt; &lt;digit&gt;\n</code></pre> <p>Voici quelques exemples de d\u00e9clarations de variables :</p> <pre><code>int a;\nint b = 2;\nfloat c = 3.14;\nstring d = \"Hello world!\";\nchar e = 'a';\n</code></pre>"},{"location":"syntax/#lettres","title":"Lettres","text":"<p>Les lettres sont des caract\u00e8res Unicode, \u00e0 l'exception de certains caract\u00e8res sp\u00e9ciaux, suivant la syntaxe suivante :</p> <pre><code>&lt;letter&gt; ::= &lt;utf16-char&gt; - &lt;excluded-letter&gt;\n\n&lt;excluded-letter&gt; ::= &lt;special&gt; | &lt;space&gt; | &lt;tabulation&gt; | &lt;line-break&gt;\n\n&lt;space&gt; ::= \" \"\n\n&lt;tabulation&gt; ::= \"\\t\"\n\n&lt;line-break&gt; ::= \"\\n\"\n\n&lt;special&gt; ::= \"!\" | \"^\" | \"&amp;\" | \"(\" | \")\" | \"=\" | \"[\" | \"]\" | \"{\" | \"}\" | \"|\" | \"\\\" | \":\" | \";\" | \"'\" | '\"' | \"&lt;\" | \"&gt;\" | \",\" | \".\" | \"?\" | \"/\" | \"`\" | \"~\" | \"+\" | \"-\" | \"*\" | \"/\" | \"%\"\n</code></pre> <p>Voici quelques exemples de lettres :</p> <pre><code>int Hello_world;\nfloat \u3053\u3093\u306b\u3061\u306f\u4e16\u754c;\nchar \u4f60\u597d\u4e16\u754c;\nstring \uc548\ub155\ud558\uc138\uc694 \uc138\uacc4;\nchar \ud83d\ude04\ud83e\udd16\ud83d\udc4d;\n</code></pre>"},{"location":"syntax/#chiffres","title":"Chiffres","text":"<p>Les chiffres sont des caract\u00e8res Unicode, suivant la syntaxe suivante :</p> <pre><code>&lt;number&gt; ::= &lt;int&gt; | &lt;float&gt;\n\n&lt;int&gt; ::= &lt;digit&gt; | &lt;int&gt; &lt;digit&gt;\n\n&lt;float&gt; ::= &lt;int&gt; \".\" &lt;int&gt;\n\n&lt;digit&gt; ::= \"0\"...\"9\"\n</code></pre> <p>Voici quelques exemples de chiffres :</p> <pre><code>int a = 42;\nfloat b = 3.14;\nint c = 0;\nfloat d = 0.0;\nint e = -123456789;\nfloat f = -123.456789;\n</code></pre>"},{"location":"syntax/#indent","title":"Indent","text":"<p>L'indentation est utilis\u00e9e pour s\u00e9parer les blocs de code. Elle est compos\u00e9e d'espaces et de tabulations, suivant la syntaxe suivante :</p> <pre><code>&lt;indent&gt; ::= &lt;space&gt; | &lt;tabulation&gt; | &lt;indent&gt; &lt;indent&gt;\n</code></pre> <p>Voici quelques exemples d'indentation :</p> <pre><code>int a = 42;\nif (a == 42) {\nint b = 3.14;\nif (b == 3.14) {\nint c = 0;\n}\n}\n</code></pre>"},{"location":"syntax/#expressions","title":"Expressions","text":"<p>Une expression est une suite de caract\u00e8res qui peut \u00eatre \u00e9valu\u00e9e en une valeur. Les expressions peuvent \u00eatre utilis\u00e9es dans les variables, les conditions, les boucles, les fonctions, etc.</p> <p>Les expressions sont compos\u00e9es de variables, de chiffres, de cha\u00eenes de caract\u00e8res, de caract\u00e8res et d'op\u00e9rateurs, suivant la syntaxe suivante :</p> <pre><code>&lt;expression&gt; ::= &lt;expression&gt; &lt;op&gt; &lt;expression&gt;\n                | \"(\" &lt;expression&gt; \")\"\n                | &lt;indent&gt;\n                | &lt;number&gt;\n                | &lt;string&gt;\n                | &lt;char&gt;\n\n&lt;op&gt; ::= \"+\" | \"-\" | \"*\" | \"/\" | \"%\" | \"==\" | \"!=\" | \"&lt;\" | \"&gt;\" | \"&lt;=\" | \"&gt;=\" | \"&amp;&amp;\" | \"||\"\n\n&lt;string&gt; ::= '\"' &lt;char&gt;* '\"'\n\n&lt;char&gt; ::= &lt;utf16-char&gt;\n</code></pre> <p>Voici quelques exemples d'expressions :</p> <pre><code>int a = 42;     // 42\nint b = 3.14;   // 3.14\nint c = a + b;  // 45\nint d = a * b;  // 126\nint e = a / b;  // 13\nint f = a % b;  // 0\nchar g = 'a';   // a\nstring h = \"Hello world!\"; // Hello world!\nchar i = '\ud83d\ude04';  // \ud83d\ude04\nstring j = \"some \\\"string\\\" with \\\"quotes\\\" and chinese characters \u4f60\u597d\u4e16\u754c\"; // some \"string\" with \"quotes\" and chinese characters \u4f60\u597d\u4e16\u754c\nint k = 1 + 2 * 3;   // 7\nint l = (1 + 2) * 3; // 9\nint m = k == l;      // 0\n</code></pre>"},{"location":"syntax/#statements","title":"Statements","text":"<p>Un statement peut \u00eatre une variable, une expression, une condition, une boucle, un retour ou un appel de fonction, suivant la syntaxe suivante :</p> <pre><code>&lt;statement&gt; ::= ( &lt;variable&gt; | &lt;expression&gt; | &lt;if&gt; | &lt;while&gt; | &lt;for&gt; | &lt;return&gt; | &lt;function-call&gt; ) \";\"\n</code></pre> <p>Voici quelques exemples de statements :</p> <pre><code>int a = 42;\nint b = 3.14;\nint c = add(a, b);\nif (a == 42) {\nc = 0;\n}\nwhile (c &lt; 10) {\nc = c + 1;\n}\nfor (int i = 0; i &lt; 10; i = i + 1) {\nc = c + 1;\n}\nreturn c;\n</code></pre>"},{"location":"syntax/#retours","title":"Retours","text":"<p>Les retours sont utilis\u00e9s pour retourner une valeur depuis une fonction, suivant la syntaxe suivante :</p> <pre><code>&lt;return&gt; ::= \"return\" &lt;indent&gt; ( &lt;expression&gt; | &lt;variable&gt; | &lt;function-call&gt; ) \";\"\n</code></pre> <p>Voici quelques exemples de retours :</p> <pre><code>int a = 42;\nreturn a;\n</code></pre> <pre><code>int a = 42;\nint b = 3.14;\nreturn add(a, b);\n</code></pre> <pre><code>int a = 42;\nint b = 3.14;\nreturn a + b;\n</code></pre>"},{"location":"syntax/#appels-de-fonctions","title":"Appels de fonctions","text":"<p>Les appels de fonctions sont utilis\u00e9s pour appeler une fonction avec des arguments, si elle en a, suivant la syntaxe suivante :</p> <pre><code>&lt;function-call&gt; ::= &lt;function-name&gt; \"(\" &lt;function-call-args&gt; \")\"\n</code></pre> <p>Voici quelques exemples d'appels de fonctions :</p> <pre><code>int a = 42;\nint b = 3.14;\nint c = add(a, b);\n</code></pre> <pre><code>int a = 42;\nint b = 3.14;\nint c = addThree(a, b, 1);\n</code></pre> <pre><code>int a = getNumber();\n</code></pre>"},{"location":"syntax/#conditions","title":"Conditions","text":"<p>Les conditions sont utilis\u00e9es pour ex\u00e9cuter un bloc de code si une expression est vraie, suivant la syntaxe suivante :</p> <pre><code>&lt;if&gt; ::= \"if\" &lt;indent&gt; \"(\" &lt;expression&gt; \")\" &lt;indent&gt; \"{\" &lt;statement&gt; \"}\" [ &lt;else-if&gt; ] [ &lt;else&gt; ]\n\n&lt;else-if&gt; ::= \"else\" &lt;indent&gt; \"if\" &lt;indent&gt; \"(\" &lt;expression&gt; \")\" &lt;indent&gt; \"{\" &lt;statement&gt; \"}\" [ &lt;else-if&gt; ] [ &lt;else&gt; ]\n\n&lt;else&gt; ::= \"else\" &lt;indent&gt; \"{\" &lt;statement&gt; \"}\"\n</code></pre> <p>Voici quelques exemples de conditions :</p> <pre><code>int a = 42;\nint b = 0;\nif (a == 42) {\nb = 3.14;\n}\n</code></pre> <pre><code>int a = 42;\nint b = 0;\nif (a != 42) {\nb = -1;\n} else {\nb = 3.14;\n}\n</code></pre> <pre><code>int a = 42;\nint b = 0;\nif (a &gt; 42) {\nb = 1;\n} else if (a &lt; 0) {\nb = -1;\n} else {\nb = 3.14;\n}\n</code></pre>"},{"location":"syntax/#boucles","title":"Boucles","text":"<p>Les boucles sont utilis\u00e9es pour ex\u00e9cuter un bloc de code plusieurs fois, suivant la syntaxe suivante :</p> <pre><code>&lt;while&gt; ::= \"while\" &lt;indent&gt; \"(\" &lt;expression&gt; \")\" &lt;indent&gt; \"{\" &lt;statement&gt; \"}\"\n\n&lt;for&gt; ::= \"for\" &lt;indent&gt; \"(\" &lt;variable&gt; \";\" &lt;expression&gt; \";\" &lt;expression&gt; \")\" &lt;indent&gt; \"{\" &lt;statement&gt; \"}\"\n</code></pre> <p>Voici quelques exemples de boucles :</p> <pre><code>int a = 0;\nwhile (a &lt; 10) {\na = a + 1;\n}\n</code></pre> <pre><code>int a = 0;\nfor (int i = 0; i &lt; 10; i = i + 1) {\na = a + 1;\n}\n</code></pre>"},{"location":"syntax/#fonctions","title":"Fonctions","text":"<p>Les fonctions sont utilis\u00e9es pour d\u00e9finir un bloc de code qui peut \u00eatre appel\u00e9 depuis d'autres blocs de code, en lui passant des arguments, si elle en a, suivant la syntaxe suivante :</p> <pre><code>&lt;function&gt; ::= \"fun\" &lt;indent&gt; &lt;function-name&gt; \"(\" &lt;function-args&gt; \")\" \":\" &lt;return-type&gt; &lt;function-body&gt;\n\n&lt;function-name&gt; ::= &lt;letter&gt; | &lt;function-name&gt; &lt;letter&gt; | &lt;function-name&gt; &lt;digit&gt;\n\n&lt;function-args&gt; ::= &lt;function-arg&gt; | &lt;function-arg&gt; \",\" &lt;function-args&gt;\n\n&lt;function-arg&gt; ::= &lt;type&gt; &lt;indent&gt; &lt;variable-name&gt;\n\n&lt;return-type&gt; ::= &lt;type&gt;\n\n&lt;function-body&gt; ::= &lt;indent&gt; &lt;statement&gt; | &lt;indent&gt; &lt;statement&gt; &lt;function-body&gt;\n</code></pre> <p>Voici quelques exemples de fonctions :</p> <pre><code>fun add(int a, int b) : int {\nreturn a + b;\n}\n</code></pre> <pre><code>fun addThree(int a, int b, int c) : int {\nreturn a + b + c;\n}\n</code></pre> <pre><code>fun getNumber() : int {\nreturn 42;\n}\n</code></pre>"},{"location":"syntax/#commentaires","title":"Commentaires","text":"<p>Les commentaires sont utilis\u00e9s pour commenter le code, permettant de donner des informations sur le code, sans que cela ne modifie le comportement du programme, suivant la syntaxe suivante :</p> <pre><code>&lt;comment&gt; ::= \"//\" &lt;utf16-char&gt;* \"\\n\"\n\n&lt;multiline-comment&gt; ::= \"/*\" &lt;utf16-char&gt;* \"*/\"\n</code></pre> <p>Voici quelques exemples de commentaires :</p> <pre><code>// Voici un commentaire en fin de ligne\nint a = 42; // Voici un commentaire en fin de ligne\nint b = 3.14; // Voici un commentaire en fin de ligne\nint c = add(a, b); // Voici un commentaire en fin de ligne\n// Tout ce qui est apr\u00e8s // est ignor\u00e9\n</code></pre> <pre><code>/*\nVoici un commentaire\nsur plusieurs lignes\nqui peut \u00eatre utilis\u00e9\nsur une ou plusieurs lignes\n*/\nint a = 42;\nint b = 3.14;\nint c = /* Ce type de commentaire peut meme \u00eatre int\u00e9grer en plein milieu du code */ add(a, b);\n// Tout ce qui est entre /* et */ est ignor\u00e9\n</code></pre>"},{"location":"syntax/#fichiers","title":"Fichiers","text":"<p>Un fichier est compos\u00e9 de fonctions, de statements et de commentaires, un fichier doit contenir une fonction <code>main</code> ou \u00eatre inclus dans un autre fichier, suivant la syntaxe suivante :</p> <pre><code>&lt;file&gt; ::= &lt;function&gt; | &lt;statement&gt; | &lt;comment&gt; | &lt;multiline-comment&gt; | &lt;file&gt; &lt;file&gt;\n</code></pre> <p>Voici un exemple de fichier :</p> <pre><code>fun add(int a, int b) : int {\nreturn a + b;\n}\n\nfun addThree(int a, int b, int c) : int {\nreturn a + b + c;\n}\n\nfun getNumber() : int {\nreturn 42;\n}\n\nfun main() : int {\nint a = 42;\nint b = 3.14;\nint c = add(a, b);\nif (a == 42) {\nc = 0;\n}\nwhile (c &lt; 10) {\nc = c + 1;\n}\nfor (int i = 0; i &lt; 10; i = i + 1) {\nc = c + 1;\n}\nint d = getNumber();\nint e = addThree(a, b, d);\nreturn e;\n}\n</code></pre>"},{"location":"syntax/#define","title":"Define","text":"<p>Les define sont utilis\u00e9s pour d\u00e9finir des constantes, suivant la syntaxe suivante :</p> <pre><code>&lt;define&gt; ::= \"#define\" &lt;indent&gt; &lt;variable-name&gt; &lt;indent&gt; &lt;expression&gt; &lt;line-break&gt;\n</code></pre> <p>Voici quelques exemples de define :</p> <pre><code>#define PI 3.14\n#define HELLO_WORLD \"Hello world!\"\n#define TRUE 1\n#define FALSE 0\n\nfloat a = PI;           // float a = 3.14;\nstring b = HELLO_WORLD; // string b = \"Hello world!\";\nint c = TRUE;           // int c = 1;\nint d = FALSE;          // int d = 0;\n</code></pre>"},{"location":"syntax/#include","title":"Include","text":"<p>Les include sont utilis\u00e9s pour inclure le contenu d'un fichier dans un autre fichier. Les include r\u00e9cursifs sont bloqu\u00e9s pour \u00e9viter les boucles infinies. La syntaxe est la suivante :</p> <pre><code>&lt;include&gt; ::= \"#include\" &lt;indent&gt; &lt;string&gt; &lt;line-break&gt;\n</code></pre> <p>Voici quelques exemples d'include :</p> <p><code>getNumber.cmm</code> :</p> <pre><code>fun getNumber() : int {\nreturn 42;\n}\n</code></pre> <p><code>main.cmm</code> :</p> <pre><code>#include \"getNumber.cmm\"\n\nfun main() : int {\nreturn getNumber();\n}\n</code></pre> <p>Voici un exemple d'include r\u00e9cursif qui est bloqu\u00e9 :</p> <p><code>add.cmm</code> :</p> <pre><code>fun add(int a, int b) : int {\nreturn a + b;\n}\n\n#include \"main.cmm\"\n</code></pre> <p><code>main.cmm</code> :</p> <pre><code>#include \"add.cmm\"\n\nfun main() : int {\nreturn add(21, 21);\n}\n</code></pre> <p>donne :</p> <pre><code>fun add(int a, int b) : int {\nreturn a + b;\n}\n\nfun main() : int {\nreturn add(21, 21);\n}\n</code></pre>"},{"location":"syntax/#exemples","title":"Exemples","text":"<p>Voici quelques exemples de programmes en C--</p>"},{"location":"syntax/#factorielle-et-fibonacci","title":"Factorielle et Fibonacci","text":"<p><code>factorial.cmm</code> :</p> <pre><code>fun factorial(int n) : int {\nif (n == 0) {\nreturn 1;\n} else {\nreturn n * factorial(n - 1);\n}\n}\n</code></pre> <p><code>fibonacci.cmm</code> :</p> <pre><code>fun fibonacci(int n) : int {\nif (n == 0) {\nreturn 0;\n} else if (n == 1) {\nreturn 1;\n} else {\nreturn fibonacci(n - 1) + fibonacci(n - 2);\n}\n}\n</code></pre> <p><code>main.cmm</code> :</p> <pre><code>#include \"factorial.cmm\"\n#include \"fibonacci.cmm\"\n\nfun main() : int {\nint a = factorial(5);\nint b = fibonacci(10);\nint c = 0;\n\nif (a &lt; b) {\nc = a;\n} else {\nc = b;\n}\n\nreturn c;\n}\n</code></pre>"},{"location":"tutorials/","title":"Tutoriel","text":""},{"location":"tutorials/#introduction","title":"Introduction","text":"<p>Ce tutoriel a pour but de vous apprendre \u00e0 utiliser notre langage de programmation.</p> <p>Il est divis\u00e9 en plusieurs parties, chacune d'entre elles vous apprendra une nouvelle notion.</p> <p>Nous vous conseillons de les suivre dans l'ordre.</p>"},{"location":"tutorials/#sommaire","title":"Sommaire","text":"<ul> <li>Partie 1 : Les variables</li> <li>Partie 2 : Les op\u00e9rateurs</li> <li>Partie 3 : Les conditions</li> <li>Partie 4 : Les boucles</li> <li>Partie 5 : Les fonctions</li> </ul>"},{"location":"features/operators/","title":"Fonctionnalit\u00e9s - Les op\u00e9rateurs","text":""},{"location":"features/operators/#tutoriel-sur-les-operateurs","title":"Tutoriel sur les op\u00e9rateurs","text":""},{"location":"features/operators/#fonctionnalites","title":"Fonctionnalit\u00e9s","text":""},{"location":"features/operators/#operateurs-arithmetiques","title":"Op\u00e9rateurs arithm\u00e9tiques","text":"<p>Les op\u00e9rateurs arithm\u00e9tiques permettent d'effectuer des op\u00e9rations arithm\u00e9tiques.</p> Op\u00e9rateur Description <code>+</code> Addition <code>-</code> Soustraction <code>*</code> Multiplication <code>/</code> Division <code>%</code> Modulo (reste de la division euclidienne)"},{"location":"features/operators/#operateurs-de-comparaison","title":"Op\u00e9rateurs de comparaison","text":"<p>Les op\u00e9rateurs de comparaison permettent de comparer deux valeurs.</p> Op\u00e9rateur Description <code>==</code> \u00c9gal <code>!=</code> Diff\u00e9rent <code>&lt;</code> Inf\u00e9rieur <code>&lt;=</code> Inf\u00e9rieur ou \u00e9gal <code>&gt;</code> Sup\u00e9rieur <code>&gt;=</code> Sup\u00e9rieur ou \u00e9gal"},{"location":"features/operators/#operateurs-logiques","title":"Op\u00e9rateurs logiques","text":"<p>Les op\u00e9rateurs logiques permettent de combiner plusieurs conditions.</p> Op\u00e9rateur Description <code>&amp;&amp;</code> ET <code>||</code> OU <code>!</code> NON"},{"location":"features/operators/#operateurs-binaires","title":"Op\u00e9rateurs binaires","text":"<p>Les op\u00e9rateurs binaires permettent de manipuler les bits d'un nombre.</p> Op\u00e9rateur Description <code>&amp;</code> ET <code>|</code> OU <code>^</code> OU exclusif"},{"location":"features/operators/#operateurs-dassignation","title":"Op\u00e9rateurs d'assignation","text":"<p>Les op\u00e9rateurs d'assignation permettent d'assigner une valeur \u00e0 une variable.</p> Op\u00e9rateur Description <code>=</code> Assignation <code>+=</code> Addition <code>-=</code> Soustraction <code>*=</code> Multiplication <code>/=</code> Division <code>%=</code> Modulo"},{"location":"features/operators/#operateurs-dincrementation-et-de-decrementation","title":"Op\u00e9rateurs d'incr\u00e9mentation et de d\u00e9cr\u00e9mentation","text":"<p>Les op\u00e9rateurs d'incr\u00e9mentation et de d\u00e9cr\u00e9mentation permettent d'augmenter ou de diminuer la valeur d'une variable.</p> Op\u00e9rateur Description <code>++</code> Incr\u00e9mentation <code>--</code> D\u00e9cr\u00e9mentation"},{"location":"features/strings/","title":"Fonctionnalit\u00e9s - Le type string","text":"<p>Le type string est un type de base de notre langage.</p> <p>Il permet de manipuler des cha\u00eenes de caract\u00e8res.</p>"},{"location":"features/strings/#declaration","title":"D\u00e9claration","text":"<p>Pour d\u00e9clarer une variable de type string, il suffit de faire :</p> <pre><code>string a = \"Hello world!\";\n</code></pre>"},{"location":"features/strings/#operateurs","title":"Op\u00e9rateurs","text":""},{"location":"features/strings/#operateur","title":"Op\u00e9rateur <code>+</code>","text":"<p>L'op\u00e9rateur <code>+</code> permet de concat\u00e9ner deux cha\u00eenes de caract\u00e8res.</p> <pre><code>string a = \"Hello\";\nstring b = \" world!\";\nstring c = a + b; // c = \"Hello world!\"\n</code></pre>"},{"location":"features/strings/#operateur_1","title":"Op\u00e9rateur <code>==</code>","text":"<p>L'op\u00e9rateur <code>==</code> permet de comparer deux cha\u00eenes de caract\u00e8res.</p> <pre><code>string a = \"Hello\";\nstring b = \"World\";\nint c = a == b; // c = 0\n</code></pre>"},{"location":"features/strings/#operateur_2","title":"Op\u00e9rateur <code>!=</code>","text":"<p>L'op\u00e9rateur <code>!=</code> permet de comparer deux cha\u00eenes de caract\u00e8res.</p> <pre><code>string a = \"Hello\";\nstring b = \"World\";\nint c = a != b; // c = 1\n</code></pre>"},{"location":"features/strings/#operateur_3","title":"Op\u00e9rateur <code>&lt;</code>","text":"<p>L'op\u00e9rateur <code>&lt;</code> permet de comparer la longueur de deux cha\u00eenes de caract\u00e8res.</p> <pre><code>string a = \"Hello\";\nstring b = \"World\";\nint c = a &lt; b; // c = 0\n</code></pre>"},{"location":"features/strings/#operateur_4","title":"Op\u00e9rateur <code>&lt;=</code>","text":"<p>L'op\u00e9rateur <code>&lt;=</code> permet de comparer la longueur de deux cha\u00eenes de caract\u00e8res.</p> <pre><code>string a = \"Hello\";\nstring b = \"World\";\nint c = a &lt;= b; // c = 1\n</code></pre>"},{"location":"features/strings/#operateur_5","title":"Op\u00e9rateur <code>&gt;</code>","text":"<p>L'op\u00e9rateur <code>&gt;</code> permet de comparer la longueur de deux cha\u00eenes de caract\u00e8res.</p> <pre><code>string a = \"Hello\";\nstring b = \"World\";\nint c = a &gt; b; // c = 0\n</code></pre>"},{"location":"features/strings/#operateur_6","title":"Op\u00e9rateur <code>&gt;=</code>","text":"<p>L'op\u00e9rateur <code>&gt;=</code> permet de comparer la longueur de deux cha\u00eenes de caract\u00e8res.</p> <pre><code>string a = \"Hello\";\nstring b = \"World\";\nint c = a &gt;= b; // c = 1\n</code></pre>"},{"location":"features/strings/#operateur_7","title":"Op\u00e9rateur <code>[]</code>","text":"<p>L'op\u00e9rateur <code>[]</code> permet d'acc\u00e9der \u00e0 un caract\u00e8re d'une cha\u00eene de caract\u00e8res.</p> <pre><code>string a = \"Hello\";\nchar b = a[0]; // b = 'H'\n</code></pre> <p>Un string se termine toujours par un caract\u00e8re nul <code>\\0</code>.</p> <p>Si vous essayez d'acc\u00e9der \u00e0 un caract\u00e8re en dehors de la cha\u00eene de caract\u00e8res, vous recevrez le dernier caract\u00e8re (le caract\u00e8re nul <code>\\0</code>).</p> <pre><code>string a = \"Hello\";\nchar b = a[10]; // b = '\\0'\n</code></pre> <p>Si vous donnez un index n\u00e9gatif, vous recevrez le n-i\u00e8me caract\u00e8re en partant de la fin.</p> <pre><code>string a = \"Hello\";\nchar b = a[-1]; // b = 'o'\nchar c = a[-4]; // c = 'e'\n</code></pre>"},{"location":"features/strings/#operateur_8","title":"Op\u00e9rateur <code>+=</code>","text":"<p>L'op\u00e9rateur <code>+=</code> permet de concat\u00e9ner deux cha\u00eenes de caract\u00e8res.</p> <pre><code>string a = \"Hello\";\nstring b = \" world!\";\na += b; // a = \"Hello world!\"\n</code></pre>"},{"location":"features/variables/","title":"Fonctionnalit\u00e9s - Les variables","text":""},{"location":"features/variables/#tutoriel-sur-les-variables","title":"Tutoriel sur les variables","text":""},{"location":"features/variables/#fonctionnalites","title":"Fonctionnalit\u00e9s","text":""},{"location":"features/variables/#types","title":"Types","text":"<p>Les types disponibles sont les suivants :</p> Type Description <code>int</code> Entier <code>float</code> Flottant <code>char</code> Caract\u00e8re <code>string</code> Cha\u00eene de caract\u00e8res"},{"location":"features/variables/#declaration","title":"D\u00e9claration","text":"<p>Le nom de la variable peut contenir n'importe quel caract\u00e8re pr\u00e9sent dans l'UTF-16.</p> <p>Par exemple :</p> <pre><code>// int en fran\u00e7ais\nint mon_entier;\n// float en chinois\nfloat \u6d6e\u70b9\u6570;\n// char en japonais\nchar \u6587\u5b57;\n// string en russe\nstring \u0421\u0442\u0440\u043e\u043a\u0430;\n// int en emoji\nint \ud83e\udd16\ud83d\udc4d;\n</code></pre>"},{"location":"features/variables/#affectation","title":"Affectation","text":"<p>Les char et string peuvent contenir des caract\u00e8res UTF-16.</p> <p>Par exemple :</p> <pre><code>mon_entier = 5;\n\u6d6e\u70b9\u6570 = 3.14;\n\u6587\u5b57 = 'a';\n\u0421\u0442\u0440\u043e\u043a\u0430 = \"Hello World!\ud83d\ude04\";\n\ud83e\udd16\ud83d\udc4d = 42;\n</code></pre>"},{"location":"tutorials/conditions/","title":"Tutoriel sur les conditions","text":""},{"location":"tutorials/conditions/#definition","title":"D\u00e9finition","text":"<p>Une condition est une expression qui peut \u00eatre vraie ou fausse.</p> <p>Une condition permet de contr\u00f4ler l'ex\u00e9cution d'un programme.</p> <p>Si la condition est vraie, le programme ex\u00e9cute une partie du code, sinon il ex\u00e9cute une autre partie du code.</p>"},{"location":"tutorials/conditions/#structure","title":"Structure","text":""},{"location":"tutorials/conditions/#if","title":"If","text":"<p>La structure d'une condition est la suivante :</p> <pre><code>if (condition) {\n// Instructions\n}\n</code></pre> <p>Par exemple :</p> <pre><code>if (a == 5) {\nprint(\"a est \u00e9gal \u00e0 5\");\n}\n</code></pre>"},{"location":"tutorials/conditions/#else","title":"Else","text":"<p>Il est possible d'ajouter une alternative \u00e0 une condition :</p> <pre><code>if (condition) {\n// Instructions\n} else {\n// Instructions\n}\n</code></pre> <p>Par exemple :</p> <pre><code>if (a == 5) {\nprint(\"a est \u00e9gal \u00e0 5\");\n} else {\nprint(\"a n'est pas \u00e9gal \u00e0 5\");\n}\n</code></pre>"},{"location":"tutorials/conditions/#else-if","title":"Else if","text":"<p>Il est possible d'ajouter plusieurs alternatives \u00e0 une condition :</p> <pre><code>if (condition1) {\n// Instructions\n} else if (condition2) {\n// Instructions\n} else {\n// Instructions\n}\n</code></pre> <p>Par exemple :</p> <pre><code>if (a == 5) {\nprint(\"a est \u00e9gal \u00e0 5\");\n} else if (a == 6) {\nprint(\"a est \u00e9gal \u00e0 6\");\n} else {\nprint(\"a n'est ni \u00e9gal \u00e0 5 ni \u00e9gal \u00e0 6\");\n}\n</code></pre>"},{"location":"tutorials/conditions/#operateurs-logique","title":"Op\u00e9rateurs logique","text":"<p>Les op\u00e9rateurs logiques permettent de combiner plusieurs conditions.</p>"},{"location":"tutorials/conditions/#operateur-et","title":"Op\u00e9rateur ET","text":"<p>L'op\u00e9rateur ET permet de combiner deux conditions.</p> <pre><code>if (condition1 &amp;&amp; condition2) {\n// Instructions\n}\n</code></pre> <p>Par exemple :</p> <pre><code>if (a == 5 &amp;&amp; b == 6) {\nprint(\"a est \u00e9gal \u00e0 5 ET b est \u00e9gal \u00e0 6\");\n}\n</code></pre>"},{"location":"tutorials/conditions/#operateur-ou","title":"Op\u00e9rateur OU","text":"<p>L'op\u00e9rateur OU permet de combiner deux conditions.</p> <pre><code>if (condition1 || condition2) {\n// Instructions\n}\n</code></pre> <p>Par exemple :</p> <pre><code>if (a == 5 || b == 6) {\nprint(\"a est \u00e9gal \u00e0 5 OU b est \u00e9gal \u00e0 6 OU les deux\");\n}\n</code></pre>"},{"location":"tutorials/conditions/#operateur-non","title":"Op\u00e9rateur NON","text":"<p>L'op\u00e9rateur NON permet d'inverser une condition.</p> <pre><code>if (!condition) {\n// Instructions\n}\n</code></pre> <p>Par exemple :</p> <pre><code>if (!(a == 5)) {\nprint(\"a n'est pas \u00e9gal \u00e0 5\");\n}\n</code></pre>"},{"location":"tutorials/conditions/#exercices","title":"Exercices","text":""},{"location":"tutorials/conditions/#exercice-1","title":"Exercice 1","text":"<p>\u00c9crire un programme qui compare deux nombres et qui affiche le plus grand.</p>"},{"location":"tutorials/conditions/#exercice-2","title":"Exercice 2","text":"<p>\u00c9crire un programme qui compare deux nombres et qui affiche le plus petit.</p>"},{"location":"tutorials/conditions/#exercice-3","title":"Exercice 3","text":"<p>\u00c9crire un programme qui compare deux nombres et qui affiche si ils sont \u00e9gaux ou non.</p>"},{"location":"tutorials/conditions/#exercice-4","title":"Exercice 4","text":"<p>\u00c9crire un programme qui compare deux nombres et qui affiche si ils sont diff\u00e9rents ou non.</p>"},{"location":"tutorials/functions/","title":"Tutoriel sur les fonctions","text":""},{"location":"tutorials/functions/#definition","title":"D\u00e9finition","text":"<p>Une fonction est un bloc de code qui peut \u00eatre appel\u00e9 plusieurs fois.</p>"},{"location":"tutorials/functions/#declaration","title":"D\u00e9claration","text":"<p>La d\u00e9claration d'une fonction se fait de la mani\u00e8re suivante :</p> <pre><code>fun nom_fonction(type1 param1, type2 param2) : type_retour\n{\n// Instructions\n}\n</code></pre> <p>Par exemple :</p> <pre><code>fun add(int a, int b) : int\n{\nreturn a + b;\n}\n</code></pre>"},{"location":"tutorials/functions/#appel","title":"Appel","text":"<p>L'appel d'une fonction se fait de la mani\u00e8re suivante :</p> <pre><code>nom_fonction(arg1, arg2);\n</code></pre> <p>Par exemple :</p> <pre><code>add(5, 3);\n</code></pre>"},{"location":"tutorials/functions/#exercices","title":"Exercices","text":""},{"location":"tutorials/functions/#exercice-1","title":"Exercice 1","text":"<p>\u00c9crire une fonction qui ne prend pas de param\u00e8tres et qui affiche \"Hello World!\".</p>"},{"location":"tutorials/functions/#exercice-2","title":"Exercice 2","text":"<p>\u00c9crire une fonction qui prend un param\u00e8tre et qui affiche ce param\u00e8tre.</p>"},{"location":"tutorials/functions/#exercice-3","title":"Exercice 3","text":"<p>\u00c9crire une fonction qui prend deux param\u00e8tres et qui affiche la somme de ces deux param\u00e8tres.</p>"},{"location":"tutorials/functions/#exercice-4","title":"Exercice 4","text":"<p>\u00c9crire une fonction qui prend deux param\u00e8tres et qui retourne la somme de ces deux param\u00e8tres.</p>"},{"location":"tutorials/functions/#exercice-5","title":"Exercice 5","text":"<p>\u00c9crire une fonction qui prend deux param\u00e8tres et qui retourne le plus grand de ces deux param\u00e8tres.</p>"},{"location":"tutorials/functions/#exercice-6","title":"Exercice 6","text":"<p>\u00c9crire une fonction qui prend deux param\u00e8tres et qui retourne le plus petit de ces deux param\u00e8tres.</p>"},{"location":"tutorials/functions/#exercice-7","title":"Exercice 7","text":"<p>\u00c9crire une fonction qui prend un param\u00e8tre et qui retourne la factorielle de ce param\u00e8tre.</p>"},{"location":"tutorials/functions/#exercice-8","title":"Exercice 8","text":"<p>\u00c9crire une fonction qui prend un param\u00e8tre et qui retourne la somme des nombres de 1 \u00e0 ce param\u00e8tre.</p>"},{"location":"tutorials/loops/","title":"Tutoriel sur les boucles","text":""},{"location":"tutorials/loops/#definition","title":"D\u00e9finition","text":"<p>Une boucle est une structure qui permet de r\u00e9p\u00e9ter plusieurs fois une partie du code.</p>"},{"location":"tutorials/loops/#structure","title":"Structure","text":""},{"location":"tutorials/loops/#while","title":"While","text":"<p>La structure d'une boucle while est la suivante :</p> <pre><code>while (condition) {\n// Instructions\n}\n</code></pre> <p>Par exemple :</p> <pre><code>int i = 0;\nwhile (i &lt; 10) {\nprint(i);\ni = i + 1;\n}\n</code></pre>"},{"location":"tutorials/loops/#for","title":"For","text":"<p>La structure d'une boucle for est la suivante :</p> <pre><code>for (initialisation; condition; incr\u00e9mentation) {\n// Instructions\n}\n</code></pre> <p>Par exemple :</p> <pre><code>for (int i = 0; i &lt; 10; i = i + 1) {\nprint(i);\n}\n</code></pre>"},{"location":"tutorials/loops/#exercices","title":"Exercices","text":""},{"location":"tutorials/loops/#exercice-1","title":"Exercice 1","text":"<p>\u00c9crire un programme qui affiche les nombres de 1 \u00e0 10.</p>"},{"location":"tutorials/loops/#exercice-2","title":"Exercice 2","text":"<p>\u00c9crire un programme qui affiche les nombres de 10 \u00e0 1.</p>"},{"location":"tutorials/loops/#exercice-3","title":"Exercice 3","text":"<p>\u00c9crire un programme qui affiche les nombres pairs de 1 \u00e0 10.</p>"},{"location":"tutorials/loops/#exercice-4","title":"Exercice 4","text":"<p>\u00c9crire un programme qui affiche les nombres impairs de 1 \u00e0 10 en sautant les nombres 3 et 7.</p>"},{"location":"tutorials/operators/","title":"Tutoriel sur les op\u00e9rateurs","text":""},{"location":"tutorials/operators/#definition","title":"D\u00e9finition","text":"<p>Un op\u00e9rateur est un symbole qui permet d'effectuer une op\u00e9ration sur des valeurs.</p>"},{"location":"tutorials/operators/#operateurs","title":"Op\u00e9rateurs","text":"<p>Pour conna\u00eetre la liste des op\u00e9rateurs disponibles, voir la page Fonctionnalit\u00e9s - Les op\u00e9rateurs.</p>"},{"location":"tutorials/operators/#utilisation","title":"Utilisation","text":"<p>Un op\u00e9rateur peut \u00eatre utilis\u00e9 dans une expression :</p> <pre><code>// Op\u00e9rateurs arithm\u00e9tiques\nint a = 5 + 3; // a vaut 8\nint b = 5 - 3; // b vaut 2\nint c = 5 * 3; // c vaut 15\nint d = 5 / 3; // d vaut 1\nint e = 5 % 3; // e vaut 2\n\n// Op\u00e9rateurs de comparaison\nint f = 5 == 3; // f vaut 0\nint g = 5 != 3; // g vaut 1\nint h = 5 &lt; 3; // h vaut 0\nint i = 5 &lt;= 3; // i vaut 0\nint j = 5 &gt; 3; // j vaut 1\nint k = 5 &gt;= 3; // k vaut 1\n\n// Op\u00e9rateurs logiques\nint l = 5 &amp;&amp; 3; // l vaut 1\nint m = 5 || 3; // m vaut 1\nint n = !5; // n vaut 0\n\nint o = 1 + 2 * 3; // o vaut 7\nint p = (1 + 2) * 3; // p vaut 9\n</code></pre>"},{"location":"tutorials/operators/#exercices","title":"Exercices","text":""},{"location":"tutorials/operators/#exercice-1","title":"Exercice 1","text":"<p>\u00c9crire un programme qui calcule le p\u00e9rim\u00e8tre d'un carr\u00e9 dont la longueur du c\u00f4t\u00e9 est 5.</p>"},{"location":"tutorials/operators/#exercice-2","title":"Exercice 2","text":"<p>\u00c9crire un programme qui calcule l'aire d'un carr\u00e9 dont la longueur du c\u00f4t\u00e9 est 5.</p>"},{"location":"tutorials/operators/#exercice-3","title":"Exercice 3","text":"<p>\u00c9crire un programme qui calcule le p\u00e9rim\u00e8tre d'un rectangle dont la longueur est 5 et la largeur est 3.</p>"},{"location":"tutorials/operators/#exercice-4","title":"Exercice 4","text":"<p>\u00c9crire un programme qui calcule l'aire d'un rectangle dont la longueur est 5 et la largeur est 3.</p>"},{"location":"tutorials/variables/","title":"Tutoriel sur les variables","text":""},{"location":"tutorials/variables/#definition","title":"D\u00e9finition","text":"<p>Une variable est un espace m\u00e9moire qui permet de stocker une valeur.</p> <p>Cette valeur peut \u00eatre de diff\u00e9rents types.</p>"},{"location":"tutorials/variables/#informations","title":"Informations","text":"<p>Pour plus d'informations sur les types et les noms des varibles, voir la page Fonctionnalit\u00e9s - Les variables.</p>"},{"location":"tutorials/variables/#declaration","title":"D\u00e9claration","text":"<p>En C--, une variable doit \u00eatre d\u00e9clar\u00e9e avant d'\u00eatre utilis\u00e9e. La d\u00e9claration d'une variable se fait de la mani\u00e8re suivante :</p> <pre><code>type nom_variable;\n</code></pre> <p>Par exemple :</p> <pre><code>int a;\nfloat b;\nchar c;\nstring d;\n</code></pre>"},{"location":"tutorials/variables/#affectation","title":"Affectation","text":"<p>L'affectation d'une valeur \u00e0 une variable se fait de la mani\u00e8re suivante :</p> <pre><code>nom_variable = valeur;\n</code></pre> <p>Par exemple :</p> <pre><code>a = 5;\nb = 3.14;\nc = 'a';\nd = \"Hello World!\";\n</code></pre>"},{"location":"tutorials/variables/#declaration-et-affectation","title":"D\u00e9claration et affectation","text":"<p>Il est possible de d\u00e9clarer et d'affecter une valeur \u00e0 une variable en m\u00eame temps :</p> <pre><code>type nom_variable = valeur;\n</code></pre> <p>Par exemple :</p> <pre><code>int a = 5;\nfloat b = 3.14;\nchar c = 'a';\nstring d = \"Hello World!\";\n</code></pre>"},{"location":"tutorials/variables/#utilisation","title":"Utilisation","text":"<p>Une variable peut \u00eatre utilis\u00e9e dans une expression :</p> <pre><code>int a = 5;\nint b = 3;\nint c = a + b; // c vaut 8\n</code></pre>"},{"location":"tutorials/variables/#portee","title":"Port\u00e9e","text":"<p>Une variable a une port\u00e9e, c'est-\u00e0-dire une zone du code dans laquelle elle est accessible.</p> <p>En C--, une variable d\u00e9clar\u00e9e dans une fonction n'est accessible que dans cette fonction.</p> <p>Par exemple :</p> <pre><code>void fonction1() {\nint b = 3;\nint c = 5 + b; // c vaut 8\n}\n\nvoid fonction2() {\nint d = 5 + b; // erreur : b n'est pas accessible\n}\n</code></pre>"},{"location":"tutorials/variables/#exercices","title":"Exercices","text":""},{"location":"tutorials/variables/#exercice-1","title":"Exercice 1","text":"<p>\u00c9crire un programme qui d\u00e9clare une variable de chaque type et qui leur affecte une valeur.</p>"},{"location":"tutorials/variables/#exercice-2","title":"Exercice 2","text":"<p>Maintenant, le programme doit afficher la valeur de chaque variable.</p> <p>Indice</p> <p>Pour afficher une valeur, il faut utiliser la fonction <code>print</code></p>"},{"location":"tutorials/variables/#exercice-3","title":"Exercice 3","text":"<p>\u00c9crire un programme qui d\u00e9clare deux variables de type entier et qui leur affecte une valeur.</p> <p>Le programme doit ensuite afficher la somme de ces deux variables.</p>"}]}